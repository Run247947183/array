class Solution {
    public int findShortestSubArray(int[] nums) {
        //返回最大频率数字
        //第一个map存储key和次数
        //然后list存储最大次数的key ，数组转为字符串找到最小的最后一次出现的key
        int max=0;
        int min=nums.length;
        Map<Integer,Integer> map=new HashMap<>();
        List<Integer> list=new ArrayList<>();
        for(Integer x: nums){
            if(map.get(x)==null){
                map.put(x,1);
            }else{
                map.put(x,map.get(x)+1);
            }
        }
         for (Integer value : map.values()) { 
          if(value>max){
              max=value;
          }
         } 
        for(Integer key:map.keySet()){
           if(map.get(key)==max){
               list.add(key);
           }
        }
        for(Integer key:list){
           int x=find(nums,key,1);
            int y=find(nums,key,0);
            int z=x-y+1;
            if(min>=z){
                min=z;
            }
        }
        if(min==0)return 1;
        return min;
    }
     public int find(int[] nums,int key,int xx) {
         if(xx==0){
             int index=0;
             for(Integer num:nums){
                 if(num==key)return index;
                 index++;
             }
         }else{
             for(int i=nums.length-1;i>=0;i--){
                 if(nums[i]==key)return i;
             }
         }
         return -1;
     }
}
